import UIKit


/**通用字符串转字符数组方法*/
func stringToArr(_ str: String) -> [Character] {
    var arr = str.cString(using: .utf8)!
    arr.removeLast()
    return arr.compactMap({Character.init(Unicode.Scalar.init(Int($0))!)})
}

func stringToArr3(_ str: String) -> [Character] {
    var arr = [Character]()
    for item in str.enumerated(){
        arr.append(item.element)
    }
    return arr
}
func stringToArr2(_ str: String) -> [Character] {
    return str.enumerated().compactMap({$0.element})
}
///经测试4  和 5 是较快的 5 是最快的
//func stringToArr4(_ str: String) -> [Character] {
//    return Array(str.characters)
//}

func stringToArr5(_ str: String) -> [Character] {
    var arr = [Character]()
    for c in str{
        arr.append(c)
    }
    return arr
}

//  Definition for singly-linked list.
public class ListNode {
    public var val: Int
    public var next: ListNode?
    public init(_ val: Int) {
        self.val = val
        self.next = nil
    }
}

//
//
///*找出数组中相加等于target的两个index*/
//func twoSum(_ nums: [Int], _ target: Int) -> [Int] {
//    var dic = [Int:Int]()
//    for i in 0..<nums.count{
//        let t = target-nums[i]
//        if dic.keys.contains(t),dic[t] != i{
//            return [dic[t]!,i]
//        }
//        dic[nums[i]] = i
//    }
//    return [0]
//}
//
////twoSum([1,2,3,4,5], 5)
//
//

/*链表相加，反向输出*/

//func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {
//    var next1 = l1
//    var next2 = l2
//    var val1 = l1?.val
//    var val2 = l2?.val
//    var sumVal = 0
//    var carry = 0
//    let result = ListNode(0)
//    var current = result
//    while (next1 != nil || next2 != nil) {
//        if next2 == nil{
//            val2 = 0
//        }
//        if next1 == nil{
//            val1 = 0
//        }
//        sumVal = val1! + val2! + carry
//        carry = sumVal/10
//        let tl = ListNode(sumVal%10)
//        current.next = tl
//        current = current.next!
//        next1 = next1?.next
//        next2 = next2?.next
//        val1 = next1?.val
//        val2 = next2?.val
//    }
//    if carry > 0 {
//        current.next = ListNode(carry)
//    }
//    return result.next
//}
//
////let l1 = ListNode(5)
////let l2 = ListNode(5)
////let l3 = ListNode(3)
////let l4 = ListNode(5)
////let l5 = ListNode(6)
////let l6 = ListNode(4)
//
////l2.next = l3
////l1.next = l2
////l5.next = l6
////l4.next = l5
////let a = addTwoNumbers(l1, l2)
//
//
///*3，Given a string, find the length of the longest substring without repeating characters.*/
//
//func lengthOfLongestSubstring(_ s: String) -> Int {
//    let n = s.lengthOfBytes(using: .utf8)
//    let carr = s.cString(using: .utf8)!
//    var answer = 0,i=0,j=0
//    var dic = [CChar:Int]()
//    while j<n {
//        if let index = dic[carr[j]]{
//            i = max(index,i)
//        }
//        dic[carr[j]] = j+1
//        answer = max(answer, j-i+1)
//        j += 1
//    }
//    return answer
//}
//
////lengthOfLongestSubstring("abcdefghijk")
//
//
//func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {
//    let n = (nums1 + nums2).sorted(by: {$0<$1})
//    let a = n[n.count/2]
//    if n.count%2 == 0{
//        let b = n[n.count/2-1]
//        return Double(a+b)/2.0
//    }
//    return Double(a)
//}
//
//func longestPalindrome(_ s: String) -> String {
//    let arr = s.cString(using: .utf8)
//    var i = 0
//    var dic = [arr![0]:0]
//    var result = s
//    var maxlength = 1
//
//    for j in i+1..<arr!.count{
//        let vj = arr![j]
//        if dic.keys.contains(vj){
//            i = dic[vj]!
//            if j-i+1 > maxlength{
//                maxlength = j-i+1
//                result = s.substring(with: Range<String.Index>(NSMakeRange(i, j-i+1), in: s)!)
//                dic[vj] = j
//            }
//        }else{
//            dic[vj] = j
//        }
//    }
//
//    if maxlength == 1{
//        if arr?.count == 0{
//            return s
//        }
//        if let r = Range<String.Index>(NSMakeRange(0, 1), in: s){
//            return s.substring(with:r)
//        }
//    }
//    return result
//}
////s.substring(with: Range<String.Index>(NSMakeRange(i, j-i+1), in: s)!)
////longestPalindrome("xzsacvbnmc")
//
//func numJewelsInStones(_ J: String, _ S: String) -> Int {
//    var count = 0
//    var jarr = J.cString(using: .utf8)!
//    jarr.removeLast()
//    let sarr = S.cString(using: .utf8)!
//    for char in sarr{
//        if jarr.contains(char){
//            count += 1
//        }
//    }
//    return count
//}
//
////numJewelsInStones("aAZz", "aAAbbb")
//
//func toLowerCase(_ str: String) -> String {
//    var result = ""
//    var arr = str.cString(using: .ascii)!
//    arr.removeLast()
//    for c in arr{
//        let lc = lowercaseASC(ascII: c)
//        let c = Character.init(Unicode.Scalar.init(Int(lc))!)
//        result.append(c)
//    }
//    print(str.components(separatedBy: "+").first!.filter{($0 != ".")})
//    return result
//}
//
////A = 65,a = 97,Z = 90,z=122
//func lowercaseASC(ascII:Int8) ->Int8{
//    if ascII <= 90 && ascII >= 65{
//        return ascII + 32
//    }
//    return ascII
//}
//
////toLowerCase("aaa..NN+N")
//
//func numUniqueEmails(_ emails: [String]) -> Int {
//    var localnames = [String]()
//    var domainnames = [String]()
//    for s in emails{
//        let seperatedStrs = s.components(separatedBy: "@")
//        let localName = seperatedStrs.first!.components(separatedBy: "+").first!.filter{($0 != ".")}
//        let domainName = seperatedStrs.last!
//        if !domainnames.contains(domainName){
//            domainnames.append(domainName)
//            localnames.append(localName)
//        }else{
//            if !localnames.contains(localName){
//                domainnames.append(domainName)
//                localnames.append(localName)
//            }
//        }
//    }
//
//    return localnames.count
//}
//
//func reverse(_ x: Int) -> Int {
//    var result = 0
//    var y = x
//    let max = 2147483648
//    while y != 0 {
//        result = result*10 + y%10
//        y = y/10
//        if result > max-1 || result < -max{
//            return 0
//        }
//    }
//    return result
//}
//
////reverse(1534236469)
//
//
////- = 45, + = 43, 0 = 48 ,9 == 57
//func myAtoi(_ str: String) -> Int {
//    var result = ""
//    var cstr = str.cString(using: .utf8)!.filter({($0 != 32)&&($0 != 43)})
//    guard (cstr.first! >= 48 && cstr.first! <= 57)||(cstr.first! == 45)||(cstr.first! == 43) else{
//        return 0
//    }
//    var newarr = [CChar]()
//    if let firstChar = cstr.filter({($0 < 48 || $0 > 57)&&($0 != 45)}).first{
//        for char in cstr{
//            if char != firstChar{
//                newarr.append(char)
//            }else{
//                cstr = newarr
//                break
//            }
//        }
//    }
//    let vs = cstr.filter({($0 >= 48 && $0 <= 57)||($0 == 45)||(cstr.first! == 43)})
//    for lc in vs{
//        let c = Character.init(Unicode.Scalar.init(Int(lc))!)
//        result.append(c)
//    }
//    guard let ir = Int(result) else{
//        print("not int ")
//
//        return 0
//    }
//    let max = 2147483648
//
//    if ir > max-1{
//        return Int(max-1)
//    }
//    if ir < -max{
//        return Int(-max)
//    }
//    return Int(result)!
//}
//
////myAtoi("   -42")
//
//func convert(_ s: String, _ numRows: Int) -> String {
//    if numRows == 1{
//        return s
//    }
//    var result = ""
//    var strDic = [Int:String]()
//    for i in 0..<numRows{
//        let str = ""
//        strDic[i] = str
//    }
//    var j = 0
//    var tempValue = 1
//    var cchars = s.cString(using: .utf8)!
//    cchars.removeLast()
//    for char in cchars{
//        var str = strDic[j]!
//        let c =  Character.init(Unicode.Scalar.init(Int(char))!)
//        str.append(c)
//        strDic[j] = str
//        if j == 0{
//            tempValue = 1
//        }else if j == numRows-1{
//            tempValue = -1
//        }
//        j += tempValue
//    }
//    for i in 0..<numRows{
//        result += strDic[i]!
//    }
//    return result
//}
//
////convert("abasdafsd", 3)
//
//func isPalindrome(_ x: Int) -> Bool {
//    var a = String(x).cString(using: .utf8)!
//    a.removeLast()
//    let count = a.count
//    for i in 0..<count/2{
//        if a[i] != a[count-1-i]{
//            return false
//        }
//    }
//    return true
//}
//
////isPalindrome(19)
//
//func maxArea(_ height: [Int]) -> Int {
//    var i = 0,j = height.count - 1
//    var area = 0
//    while i<j {
//        let left = height[i]
//        let right = height[j]
//        area = max(area, (j-i)*min(left, right))
//        if left<right{
//            i += 1
//        }else{
//            j -= 1
//        }
//    }
//    return area
//}
//
////maxArea([1,2,3,4,5,6,8,9,0,1])


//let romanNumberDic:[Character:Int] = {
//    return ["I":1,"V":5,"X":10,"L":50,"C":100,"D":500,"M":1000]
//}()
//
//func romanToInt(_ s: String) -> Int {
//    var result = 0
//    let dic:[Character:Int] = ["I":1,"V":5,"X":10,"L":50,"C":100,"D":500,"M":1000]
//    let chars = stringToArr(s)
//    for i in 0..<chars.count{
//        if i+1<chars.count && dic[chars[i]]!<dic[chars[i+1]]!{
//            result -= dic[chars[i]]!
//        }else{
//            result += dic[chars[i]]!
//        }
//    }
//
//    return result
//}


//romanToInt("LVIII")


//func longestCommonPrefix(_ strs: [String]) -> String {
//    var result = ""
//    if strs.count == 0{
//        return result
//    }
//    let a1 = stringToArr2(strs.max()!)
//    let a2 = stringToArr2(strs.min()!)
//    for i in 0..<min(a1.count, a2.count){
//        if a1[i] == a2[i]{
//            result .append(a1[i])
//        }else{
//            break
//        }
//    }
//    return result
//}

//func commonPrefix(str1:String,str2:String) ->String{
//
//}
//longestCommonPrefix(["1234","3456","1234567","123456789"])

//func isValid(_ s: String) -> Bool {
//    let dic:[Character:Character] = [")":"(","]":"[","}":"{"]
//    var arr = [Character]()
//    for item in s.enumerated(){
//        if item.element == "{"||item.element == "["||item.element == "("{
//            arr.append(item.element)
//        }else {
//            if arr.last == dic[item.element]{
//                arr.removeLast()
//            }else{
//                return false
//            }
//        }
//    }
//    var a = [CChar]()
//    var ta = s.utf8CString
//    ta.removeLast()
//    let lefts:[CChar] = [40,91,123]
//    for char in ta{
//        if lefts.contains(char){
//            a.append(char)
//        }else{
//            if a.last == char-1 || a.last == char-2{
//                a.removeLast()
//            }else{
//                return false
//            }
//        }
//    }
//    return a.count == 0
//}

//isValid("()[]{}")

//func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {
//    if l1 == nil{
//        return l2
//    }
//    if l2 == nil{
//        return l1
//    }
//    var next1 = l1
//    var next2 = l2
//    var arr = [Int]()
//    while next1 != nil || next2 != nil {
//        if let v1 = next1?.val{
//            arr.append(v1)
//        }
//        if let v2 = next2?.val{
//            arr.append(v2)
//        }
//        next1 = next1?.next
//        next2 = next2?.next
//    }
//
//    arr =  arr.sorted(by: {$0<$1})
//    var result:ListNode?
//    for i in arr{
//        let l = ListNode(i)
//        l.next = result
//        result = l
//    }
//    return result
//}

//func intToRoman(_ num: Int) -> String {
//    let dic = [1:"I",2:"II",3:"III",4:"IV",5:"V",6:"VI",7:"VII",8:"VIII",9:"IX",10:"X",20:"XX",30:"XXX",40:"XL",50:"L",60:"LX",70:"LXX",80:"LXXX",90:"XC",100:"C",200:"CC",300:"CCC",400:"CD",500:"D",600:"DC",700:"DCC",800:"DCCC",900:"CM",1000:"M",2000:"MM",3000:"MMM"]
//    var tempNum = num
//    var result = ""
//    var a = 10
//    while tempNum > 0 {
//        if let r = dic[tempNum]{
//            return r + result
//        }else if let str = dic[tempNum%a]{
//            result = str + result
//        }
//        tempNum -= tempNum%a
//        a *= 10
//        print(tempNum,result)
//    }
//    return result
//}

//intToRoman(101)

func threeSum(_ nums: [Int]) -> [[Int]] {
    var result = [[Int]]()
    let arr = nums.sorted(by: <)
    var i = 0,j = 0,k = 0
    while i < arr.count - 1 {
        if arr[i] > 0{
            break
        }else{
            if i>0 && arr[i] == arr[i-1]{
                 i += 1
                continue
            }
        }
        let a = arr[i]
        j = i+1
        k = arr.count-1
        
        while j<k {
            let b = arr[j]
            let c = arr[k]
            if a+b+c>0{
                k -= 1
            }else if a+b+c<0{
                j += 1
            }else{
                result.append([a,b,c])
                while j<k && arr[j] == arr[j+1]{
                    j += 1
                }
                while j<k && arr[k] == arr[k-1]{
                    k -= 1
                }
                j += 1
                k -= 1
            }
        }
        i += 1
    }
    return result
}

//threeSum([-2,0,3,-1,4,0,3,4,1,1,1,-3,-5,4,0])

func removeNthFromEnd(_ head: ListNode?, _ n: Int) -> ListNode? {
    guard head != nil else{
        return nil
    }
    var arr = [head!.val]
    var next = head!.next
    while next != nil {
        arr.append(next!.val)
        next = next!.next
    }
    arr.remove(at: arr.count - n)
    var result:ListNode?
    var i = arr.count - 1
    while i>=0 {
        let v = arr[i]
        let ln = ListNode(v)
        ln.next = result
        result = ln
        i -= 1
    }
    return result
}

func threeSumClosest(_ nums: [Int], _ target: Int) -> Int {
    if nums.count == 0{
        return 0
    }
    let arr = nums.sorted(by: <)
    var result = 0
    var min = max(abs(arr.last! * 3 - target), abs(arr.first! * 3 - target))
    var i = 0,j = 0,k = 0
    while i < arr.count-2{
        let a = arr[i]
        j = i+1
        k = arr.count-1
        while j<k {
            let b = arr[j]
            let c = arr[k]
            if abs((a+b+c)-target)<=min{
                result = a+b+c
                min = abs((a+b+c)-target)
                print(a,b,c)
            }
            if a+b+c > target{
                k -= 1
            }else if a+b+c < target {
                j += 1
            }else{
                return a+b+c
            }
        }
        i += 1
    }
    return result
}
//
//threeSumClosest([47,-48,-72,97,-78,50,-22,18,9,24,28,-53,44,-96,50,45,86,11,21,-44,67,83,55,-86,-33,0,-53,-94,-60,57,-72,-73,-27,13,91,80,18,-80,-29,-69,-74,-90,54,22,3,91,-47,-32,80,-55,69,-95,62,-92,4,-86,62,3,23,-30,-4,0,49,24,10,-32,79,-99,-66,-30,-83,-13,90,-27,9,-4,9,98,-70,-19,32,24,-77,83,11,-78,-94,4,41,61,20,96,-36,54,-46,-51,91,54,30,-42,82,0,9,24,-2,32,-16,-18,87,23,78,-10,-82,-67,68,-18,-61,91,-90,-53,67,-48,12,1,-71,-99,31,82,39,-56,23,-89,-58,19,-60,39,-23,-76,-85,67,-33,69,-74,-8,-99,52,-70,-71,85,-8,28,-3,-100,18,88,5,-16,17,91,-35,22,-76],
//    298)

//
//func printAddress(){
//    let a = 1
//    var b = a
//    let c = a
//    print(String.init(format: "%p", a))
//    print(String.init(format: "%p", b))
//    print(String.init(format: "%p", c as! CVarArg))
//}
//
//printAddress()

func removeDuplicates(_ nums: inout [Int]) -> Int {
    var a = nums.first
    var i = 1
    while i < nums.count {
        if nums[i] == a{
            nums.remove(at: i)
        }else{
            a = nums[i]
            i += 1
        }
    }
    return nums.count
}

//var arr = [1,1,2]
//removeDuplicates(&arr)

func strStr(_ haystack: String, _ needle: String) -> Int {
    if needle == ""{
        return 0
    }
    let arr1 = stringToArr5(haystack)
    let arr2 = stringToArr5(needle)
    if arr1.count < arr2.count{
        return -1
    }
    var i = 0,j = 0,last = 0,result = -1
    while i < arr1.count,j<arr2.count {
        if arr1[i] == arr2[j]{
            if j == 0{
                last = i
            }
            i += 1
            j += 1
            if j == arr2.count{
                result = last
            }
        }else{
            last += 1
            i = last
            j = 0
            result = -1
        }
    }
    return result
}

//strStr("mississippi","issipi")

func searchInsert(_ nums: [Int], _ target: Int) -> Int {
    var i = 0
    while i < nums.count {
        if nums[i] == target || nums[i] > target{
            return i
        }
        i += 1
    }
    return nums.count
}
///经测试while比for in 快 又节省内存,for 的快速遍历次之 for in 最慢
func searchInsert2(_ nums: [Int], _ target: Int) -> Int {
    for i in 0..<nums.count{
        if nums[i] == target || nums[i] > target{
            return i
        }
    }
    return nums.count
}
func searchInsert3(_ nums: [Int], _ target: Int) -> Int {
    var index = 0
    for i in nums{
        if i == target || i > target{
            return index
        }
        index += 1
    }
    return nums.count
}
//searchInsert([1,2,4,5,6], 5)

func countAndSay(_ n: Int) -> String {
    let dic = [
        1:"1",
        2:"11",
        3:"21",
        4:"1211",
        5:"111221",
        6:"312211",
        7:"13112221",
        8:"1113213211",
        9:"31131211131221",
        10:"13211311123113112211",
        11:"11131221133112132113212221",
        12:"3113112221232112111312211312113211",
        13:"1321132132111213122112311311222113111221131221",
        14:"11131221131211131231121113112221121321132132211331222113112211",
        15:"311311222113111231131112132112311321322112111312211312111322212311322113212221",
        16:"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211",
        17:"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221",
        18:"31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211",
        19:"1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221",
        20:"11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211",
        21:"311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221",
        22:"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113213221133122112231131122211211131221131112311332211211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211",






        29:"11131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221133112132123222112111312211312112213211231132132211211131221131211132221121311121312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221231122212213211321322112311311222113311213212322211211131221131211132221232112111312111213322112131112131221121321131211132221121321132132212321121113121112133221121321132132211331121321231231121113112221121321133112132112211213322112311311222113111231133211121312211231131122211322311311222112111312211311123113322112132113212231121113112221121321132122211322212221121123222112111312211312111322212321121113121112131112132112311321322112111312212321121113122112131112131221121321132132211231131122111213122112311311222113111221131221221321132132211331121321231231121113112221121321133112132112211213322112311311222113111231133211121312211231131122211322311311222112111312211311123113322112132113212231121113112221121321132122211322212221121123222112311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122111213122112311311222112111331121113112221121113122113121113222112132113213221232112111312111213322112311311222113111221221113122112132113121113222112311311222113111221132221231221132221222112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221133112132123222112111312211312111322212321121113121112133221132211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112132132112211131221131211132221121321132132212321121113121112133221123113112221131112311332111213211322111213111213211231131211132211121311222113321132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322111213122112311311123112112322211213211321322113312211223113112221121113122113111231133221121321132132211331121321232221123123211231132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212312311211131211131221223113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112211213322112312321123113213221123113112221133112132123222112311311222113111231132231121113112221121321133112132112211213322112311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122111213122112311311221132211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221133112132123222112111312211312111322212311222122132113213221123113112221133112132123222112311311222113111231133211121321132211121311121321122112133221123113112221131112311332211322111312211312111322212321121113121112133221121321132132211331121321231231121113112221121321132122311211131122211211131221131211322113322112111312211322132113213221123113112221131112311311121321122112132231121113122113322113111221131221",

        ]
    return dic[n] ?? "1"
}

func maxSubArray(_ nums: [Int]) -> Int {
    var result = nums.first!
    var sum = 0
    for i in nums{
        if sum > 0 {
            sum += i
        }else{
            sum = i
        }
        result = max(sum, result)
    }
    return result
}
func maxSubArray2(_ nums: [Int]) -> Int {
    var result = nums.first!
    var sum = 0,i = 0
    while i < nums.count {
        if sum > 0 {
            sum += nums[i]
        }else{
            sum = nums[i]
        }
        result = max(sum, result)
        i += 1
    }
    return result
}


public class TreeNode {
      public var val: Int
      public var left: TreeNode?
      public var right: TreeNode?
      public init(_ val: Int) {
          self.val = val
          self.left = nil
          self.right = nil
      }
 }

func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -> Bool {
    if p == nil,q == nil{
        return true
    }
    if p == nil || q == nil{
        return false
    }
    if (p?.val != q?.val) || !(isSameTree(p?.left, q?.left)) || !(isSameTree(p?.right, q?.right)){
        return false
    }
    return true
}
//let a0 = TreeNode.init(1)
//let a1 = TreeNode.init(2)
//let a2 = TreeNode.init(3)
//let a3 = TreeNode.init(1)
//let a4 = TreeNode.init(2)
//let a5 = TreeNode.init(3)
//a0.left = a1
//a0.right = a2
//a3.left = a4
//a3.right = a5
//
//isSameTree(a0, a3)


func lengthOfLastWord(_ s: String) -> Int {
    let arr = s.components(separatedBy: " ").filter({$0 != ""})
    return arr.last?.count ?? 0
}

lengthOfLastWord("b a  ")

func plusOne(_ digits: [Int]) -> [Int] {
    var i = digits.count - 1
    var arr = [Int]()
    var carr = 1
    while i > -1{
        var t = digits[i]
        t += carr
        arr.insert(t == 10 ? 0 : t, at: 0)
        carr = t == 10 ? 1 : 0
        i -= 1
    }
    if carr == 1{
        arr.insert(1, at: 0)
    }
    return arr
}

func addBinary(_ a: String, _ b: String) -> String {
    
    let dic:[Character:Int] = ["1":1,"0":0]
    let a1 = a.compactMap({dic[$0]})
    let a2 = b.compactMap({dic[$0]})
    var i = a1.count - 1, j = a2.count - 1
    var carr = 0
    var arr = [Int]()
    while i > -1 || j > -1 {
        var r = carr
        if i > -1{
            r += a1[i]
        }
        if j > -1{
            r += a2[j]
        }
        if r > 1{
            carr = 1
            r = r == 2 ? 0 : 1
        }else{
            carr = 0
        }
        arr.insert(r, at: 0)
        i -= 1
        j -= 1
    }

    if carr == 1{
        arr.insert(1, at: 0)
    }
    var str = ""
    for c in arr{
        str += String(c)
    }
    return str
}



